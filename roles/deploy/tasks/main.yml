
- name: Create networks
  loop: "{{networks}}"
  loop_control:
    loop_var: network

  containers.podman.podman_network:
    name: "netbox-docker_{{network.name}}"
    ip_range: "{{network.range}}"
    subnet: "{{network.subnet}}"
    gateway: "{{network.gateway}}"

- name: add podman support
  copy:
    dest: "/tmp/netbox-docker/docker-compose.yml"
    content: |
      services:
        netbox: &netbox
          image: docker.io/netboxcommunity/netbox:${VERSION-v4.0-2.9.1}
          depends_on:
            - postgres
            - redis
            - redis-cache
          {% if netbox_ip %}ip: {{netbox_ip}}{% endif %}
          
          env_file: env/netbox.env
          user: 'unit:root'
          healthcheck:
            start_period: 60s
            timeout: 3s
            interval: 15s
            test: "curl -f http://localhost:8080/login/ || exit 1"
          volumes:
            - ./configuration:/etc/netbox/config:z,ro
            - netbox-media-files:/opt/netbox/netbox/media:rw
            - netbox-reports-files:/opt/netbox/netbox/reports:rw
            - netbox-scripts-files:/opt/netbox/netbox/scripts:rw
        netbox-worker:
          <<: *netbox
          {% if netbox_worker_ip %}ip: {{netbox_worker_ip}}{% endif %}
          
          depends_on:
            netbox:
              condition: service_healthy
          command:
            - /opt/netbox/venv/bin/python
            - /opt/netbox/netbox/manage.py
            - rqworker
          healthcheck:
            start_period: 20s
            timeout: 3s
            interval: 15s
            test: "ps -aux | grep -v grep | grep -q rqworker || exit 1"
        netbox-housekeeping:
          <<: *netbox
          {% if netbox_housekeeping_ip %}ip: {{netbox_housekeeping_ip}}{% endif %}
          
          depends_on:
            netbox:
              condition: service_healthy
          command:
            - /opt/netbox/housekeeping.sh
          healthcheck:
            start_period: 20s
            timeout: 3s
            interval: 15s
            test: "ps -aux | grep -v grep | grep -q housekeeping || exit 1"
        
        postgres:
          {% if postgres_ip %}ip: {{postgres_ip}}{% endif %}
          
          image: docker.io/postgres:16-alpine
          env_file: env/postgres.env
          volumes:
            - netbox-postgres-data:/var/lib/postgresql/data
        
        redis:
          image: docker.io/redis:7-alpine10.89.0.53
          {% if redis_ip %}ip: {{redis_ip}}{% endif %}
          
          command:
            - sh
            - -c # this is to evaluate the $REDIS_PASSWORD from the env
            - redis-server --appendonly yes --requirepass $$REDIS_PASSWORD ## $$ because of docker-compose
          env_file: env/redis.env
          volumes:
            - netbox-redis-data:/data
        
        redis-cache:
          image: docker.io/redis:7-alpine
          {% if redis_cache_ip %}ip: {{redis_cache_ip}}{% endif %}

          command:
            - sh
            - -c # this is to evaluate the $REDIS_PASSWORD from the env
            - redis-server --requirepass $$REDIS_PASSWORD ## $$ because of docker-compose
          env_file: env/redis-cache.env
          volumes:
            - netbox-redis-cache-data:/data

      volumes:
        netbox-media-files:
          driver: local
        netbox-postgres-data:
          driver: local
        netbox-redis-cache-data:
          driver: local
        netbox-redis-data:
          driver: local
        netbox-reports-files:
          driver: local
        netbox-scripts-files:
          driver: local

  when:  netbox_ip or netbox_worker_ip or netbox_housekeeping_ip or postgres_ip or redis_ip or redis_cache_ip 
- name: Create docker-compose.override.yml
  copy:
    dest: "/tmp/netbox-docker/docker-compose.override.yml"
    content: |
      version: {{ version }}
      {{overrides | to_yaml | indent(8)}}
      networks: 
- name: override networks
  loop: "{{networks}}"
  loop_control:
    loop_var: network
  ansible.builtin.shell: | 
    cat<<'EOF'>>/tmp/netbox-docker/docker-compose.override.yml
        {{ network.name }}_:        
          ipam:
              driver: bridge
              config:
                  subnet: {{ network.subnet }}
                  ip_range: {{ network.range }}
                  gateway: {{ network.gateway }}
    EOF



- name: up 
  ignore_errors:
  ansible.builtin.shell: |
          cd /tmp/netbox-docker
          sudo /home/worker/.local/bin/podman-compose pull
          /home/worker/.local/bin/podman-compose --file /tmp/netbox-docker/docker-compose.yml

- name: FÃ¼hre Commands nach festgelegten Zeiten aus
  block:
    - name: Starte Prozesse asynchron
      containers.podman.podman_container_exec: 
        name: netbox-docker_netbox_1
        user: root
        argv:
          - /bin/sh
          - -c
          - |
            process=$(ps -aux | grep manage.py | grep python3 | grep -v grep -q && echo "found process")
            echo $process        
            if([ -n "$process" ]); then
            source /opt/netbox/venv/bin/activate;
            DJANGO_SUPERUSER_PASSWORD={{password}} && python3 /opt/netbox/netbox/manage.py createsuperuser --no-input --username {{user}}  --email {{email}}
            fi
      register: result
      until: result.stdout == "\n" 
      retries: 30
      delay: 2
